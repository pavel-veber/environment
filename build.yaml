---
- name: "Create containers"
  hosts: images-local
  become: False
  tasks:

    - name: "Builah: create container "
      shell: |
        buildah from {{ item.value.from_img }}
      register: tmp_buildah_container
      loop: "{{ images | dict2items }}"

    - name: "Buildah: register new host"
      add_host:
        hostname: "{{ item.stdout }}"
        groups: "images-buildah"
        ansible_connection: "buildah"
        ansible_ssh_pipelining: True
        container: "{{ item.item }}" 
      loop: "{{ tmp_buildah_container.results }}"


- name: "Build image"
  hosts: images-buildah
  become: False
  tasks:

    - name: "Get info about container"
      set_fact:
        buildah_container: "{{ hostvars[inventory_hostname]['container']['value'] }}"

    - name: "Create a directory if it does not exist"
      file:
        path: "{{ item }}"
        state: directory
      loop: "{{ buildah_container.dirs }}"
      when: buildah_container.dirs is defined

    - name: "Copy files"
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}" 
      loop: "{{ buildah_container.files }}"
      when: buildah_container.files is defined

    - name: "Install DNF packages"
      dnf:
        name: "{{ buildah_container.packages.dnf }}"
      when: buildah_container.packages is defined and buildah_container.packages.dnf is defined

    - name: "Install PIP packages"
      pip:
        name: "{{ buildah_container.packages.pip }}"
        executable: pip3.6
        extra_args: "--no-cache-dir"
      when: buildah_container.packages is defined and buildah_container.packages.pip is defined

    - name: "Download binary files"
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode | default('664') }}"
      loop: "{{ buildah_container.packages.bin }}"
      when: buildah_container.packages is defined and buildah_container.packages.bin is defined

    - name: "Unarchive files"
      unarchive:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: "{{ item.remote_src | default(True) }}"
      loop: "{{ buildah_container.packages.archive }}"
      when: buildah_container.packages is defined and buildah_container.packages.archive is defined

    - name: "Exec scripts"
      shell: "{{ item }}"
      loop: "{{ buildah_container.exec }}"
      when: buildah_container.exec is defined

    - name: "Clone Git"
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        recursive: "{{ item.recursive | default(omit) }}"
      loop: "{{ buildah_container.git }}"
      when: buildah_container.git is defined

    - name: "Clean all"
      shell: "{{ item }}"
      loop: "{{ buildah_container.clean }}"


- name: "Configure and commit containers"
  hosts: images-local
  become: False
  vars:
    buildah_containers: {}
  tasks:

    - name: "Get info about container"
      set_fact:
        buildah_containers: "{{ buildah_containers | combine({item: hostvars[item]['container']['value']}) }}"
      loop: "{{ groups['images-buildah'] }}"

    - name: "Buildah: configure"
      shell: >
        buildah config
        {% if item.value.author is defined %} --author={{ item.value.author | quote }} {%- endif %}
        {% if item.value.cmd is defined %} --cmd={{ item.value.cmd | quote }} {%- endif %}
        {% if item.value.entrypoint is defined %} --entrypoint={{ item.value.entrypoint | quote }} {%- endif %}
        {% if item.value.workdir is defined %} --workdir={{ item.value.workdir | quote }} {%- endif %}
        {% if item.value.hostname is defined %} --hostname={{ item.value.hostname | quote }} {%- endif %}
        {% if item.value.env is defined %}
        {% for key, value in item.value.env.items() %}
        --env {{ key }}={{ value | quote }}
        {%- endfor %}
        {%- endif %}
        {% if item.value.labels is defined %}
        {% for key, value in item.value.labels.items() %}
        --label {{ key }}={{ value | quote }}
        {%- endfor %}
        {%- endif %}
        {{ item.key }}
      loop: "{{ buildah_containers | dict2items }}"

    - name: "Buildah: commit"
      shell: >
        buildah commit {{ item.key }} {{ item.value.to_img }}
      loop: "{{ buildah_containers | dict2items }}"

    - name: "Buildah: debug"
      shell: buildah images
